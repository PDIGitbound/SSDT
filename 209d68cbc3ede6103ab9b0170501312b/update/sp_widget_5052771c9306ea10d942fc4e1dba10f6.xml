<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>servicenow</category>
        <client_script><![CDATA[api.controller = function($scope, $timeout, $window, snAnalytics) {
    /* widget controller */

    var c = this;
    $scope.isLoading = false;

    $scope.card_size = c.data.card_size;
    $scope.card_type = c.data.card_type;

    $scope.handleCardFocus = function(event) {
        var $target = $(event.target);
        var $titleEl = $target.find('.text-ellipsis[data-toggle="tooltip"]').first();
        if ($titleEl.length)
            $titleEl.tooltip("show");
    };

    $scope.handleCardBlur = function(event) {
        var $target = $(event.target);
        var $titleEl = $target.find('.text-ellipsis[data-toggle="tooltip"]').first();
        if ($titleEl.length)
            $titleEl.tooltip("hide");
    };

    $scope.clicked = function(item) {
        if (item.type == 'guided_help') {
            c.server.get({
                "action": "openGuidedhelp",
                "guidedHelpId": item.guided_help
            }).then(function(resp) {
                $timeout(function() {
                    $window.open(resp.data.guidedHelpResponse.url, '_self');
                }, raiseAppseeEvent(resp.data.guidedHelpResponse));
            });
        }
    };

    $scope.getCustomColor = function(styleClassFor) {
        var cssCustomClass = "";

        var supportedColors = {
            "Primary": "primary-color",
            "Dark": "dark-color",
            "Light": "light-color",
            "Accent": "accent-color",
            "Hexcode": ""
        };

        var darkColors = ['Primary', 'Dark', 'Accent'];

        switch (styleClassFor) {
            case 'background':
                cssCustomClass = (c.data.background_color) ? supportedColors[c.data.background_color] : '';
                break;
            case 'icon_overlay':
                cssCustomClass = supportedColors[c.data.icon_background_color];
                break;
            case 'text':
                if (c.data.text_color === 'false') {
                    cssCustomClass = 'text-color-black';
                    if (c.data.text_alignment === 'Default') {
                        if (darkColors.includes(c.data.background_color)) {
                            cssCustomClass = 'text-color-white';
                        }
                    } else {
                        if (c.data.show_background === 'false' && c.data.show_text_overlay === 'false') {
                            if (darkColors.includes(c.data.background_color)) {
                                cssCustomClass = 'text-color-white';
                            }
                        }
                    }
                }
                break;
        }
        return cssCustomClass;
    };

    $scope.getStyle = function(item, styleRequiredFor) {
        var styleObj = {};
        switch (styleRequiredFor) {
            case 'background':
                if (c.data.show_background === 'true' && c.data.card_type === 'Thumbnail' && c.data.text_alignment === 'Center' && item.bg_image && item.bg_image.length != 0) {
                    styleObj['background-image'] = 'url(' + item.bg_image + ')';
                }
                if (c.data.background_color === 'Hexcode') {
                    styleObj['background-color'] = c.data.background_hexcode;
                }
                if (item.type == 'guided_help') {
                    styleObj['cursor'] = 'pointer';
                }
                break;
            case 'icon_overlay':
                if (c.data.icon_background_color === 'true') {
                    styleObj['background-color'] = c.data.icon_background_hexcode;
                }
                break;
            case 'text_overlay':
                if (c.data.show_text_overlay === 'true') {
                    styleObj['background-color'] = hexToRGB(c.data.text_overlay_hexcode, '0.7');
                }
                break;
            case 'text':
                if (c.data.text_color === 'true') {
                    styleObj['color'] = c.data.text_color_hexcode;
                }
                break;
        }
        return styleObj;
    };

    $scope.getEvaluatedIconContainer = function(item) {
        switch (c.data.card_size) {
            case 'card-small':
                if (c.data.show_text_overlay === 'false') {
                    return 'icon-container--no-image-color';
                } else {
                    return 'icon-container--background-small';
                }
                break;
            case 'card-medium':
                if (c.data.show_text_overlay === 'false') {
                    if ((c.data.show_icon === 'true' && item.icon.length == 0) || c.data.show_icon === 'false') {
                        return 'icon-container--no-image-color';
                    } else {
                        return 'icon-container--background-medium';
                    }
                }
                break;
        }
    }

    $scope.getEvaluatedContentContainer = function(item) {
        switch (c.data.card_size) {
            case 'card-small':
                return 'content-container--no-image-color';
            case 'card-medium':
                if (c.data.show_text_overlay === 'false') {
                    if (c.data.show_icon === 'true' && item.icon.length != 0) {
                        return 'content-container--content-start';
                    } else {
                        return 'content-container--no-image-color';
                    }
                }
                break;
        }
    };

    $scope.getTextEllipsisClassForIE = function(item) {
        var cssClassName = "text-ellipsis-";
        if (c.data.card_size === 'card-medium') {
            cssClassName = cssClassName + "medium";
        } else {
            cssClassName = cssClassName + "small";
        }
        if (c.data.show_icon === 'true' && item.icon && item.icon.length != 0) {
            cssClassName = cssClassName + "-icon";
        } else {
            cssClassName = cssClassName + "-no-icon";
        }
        return cssClassName;
    };

    $(window).resize(handleToolTip);
    $scope.$evalAsync(handleToolTip);

    function handleToolTip() {
        var isIE = window.navigator.userAgent.indexOf('Trident/') !== -1;
        $timeout(function() {
            $(".card-thumbnail-align-center, .card-thumbnail-align-left, .card-simple").each(function(index) {
                var hideToolTip = false;
                var span = $(this).find(".card-title");
                if (isIE) {
                    if (span && span[0] && span.width() >= span[0].scrollWidth) {
                        hideToolTip = true;
                    }
                } else {
                    if (span && span[0] && span.height() >= span[0].scrollHeight) {
                        hideToolTip = true;
                    }
                }
                if (hideToolTip) {
                    $(this).tooltip('disable');
                } else {
                    $(this).tooltip('enable');
                }
            });
        }, 100);
    }

    function hexToRGB(hex, alpha) {
        var r = parseInt(hex.slice(1, 3), 16),
            g = parseInt(hex.slice(3, 5), 16),
            b = parseInt(hex.slice(5, 7), 16);
        return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
    }

    function raiseAppseeEvent(data) {
        if (!data.isNew) {
            return;
        }
        var payload = {};
        payload.name = "Guided Self-service Started";
        payload.data = {};
        payload.data["Guided Self-service"] = data.processName;
        payload.data["User Id"] = data.userId;
        payload.data["Source"] = data.source;
        snAnalytics.addEvent(payload);
    }

    c.asyncGet = function() {
        $scope.isLoading = true;
        c.data.action = "loadData";
        c.server.update().then(function(response) {
            $scope.isLoading = false;
            setTimeout(handleToolTip);
        });
    };


    var load_config = c.data.load_config;
    if (load_config === "async")
        setTimeout(c.asyncGet);
    else {
        $scope.isLoading = false;
        setTimeout(handleToolTip);
    }
};]]></client_script>
        <controller_as>c</controller_as>
        <css>$background-primary: #FFFFFF !default;&#13;
$padding-top: 0px;&#13;
$sp-panel-box-shadow: 0 4px 8px 0 rgba(23, 40, 52, 0.08) !default;&#13;
$border-primary: #8790A1 !default;&#13;
$border-secondary: #B3B7BC !default;&#13;
$border-tertiary: #DADDE2 !default;&#13;
$text-primary: #1D2223 !default;&#13;
$color-sp-separator: #EAEAEA !default;&#13;
$link-hover-color : #354ECA !default;&#13;
$link-color : #3C59E7 !default;&#13;
$sp-space--xxs: 2px !default;&#13;
$rm: $sp-space--xxs;&#13;
&#13;
.primary-color {&#13;
	background-color: $brand-primary;&#13;
}&#13;
&#13;
.dark-color {&#13;
	background-color: $color-dark;&#13;
}&#13;
&#13;
.light-color {&#13;
	background-color: $color-light;&#13;
}&#13;
&#13;
.accent-color {&#13;
	background-color: $color-accent;&#13;
}&#13;
&#13;
.text-color-white {&#13;
	color: #FFFFFF !important;&#13;
}&#13;
&#13;
.text-color-black {&#13;
	color: $text-primary !important;&#13;
}&#13;
.quick-link-empty-state {&#13;
	height: 75 * $rm;&#13;
	text-align: center;&#13;
	display: flex;&#13;
	justify-content: center;&#13;
	align-items: center;&#13;
	padding: 2.4rem;&#13;
	p{&#13;
		color: $text-secondary;&#13;
		font-size: $font-size-base;&#13;
	}&#13;
}&#13;
.link-container {&#13;
	background: $background-primary;&#13;
	box-shadow: $sp-panel-box-shadow;&#13;
	border-radius: $border-radius-large;&#13;
	margin-bottom: $rm * 8;&#13;
	min-width: min-content;&#13;
	.title {&#13;
		min-width: 250px;&#13;
		line-height: $rm * 12;&#13;
		color: $text-primary;&#13;
		word-wrap: break-word;&#13;
		padding: $rm * 12;&#13;
		border-bottom: 1px solid $color-sp-separator;&#13;
	}&#13;
	.widget-title {&#13;
		margin: 0;&#13;
	}&#13;
}&#13;
&#13;
.title--with-icon {&#13;
    display: flex;&#13;
    flex-direction: row;&#13;
}&#13;
&#13;
.external-link--icon {&#13;
  display: flex;&#13;
  padding-left: 6px;&#13;
  font-size: 14px;&#13;
  align-self: flex-start;&#13;
  line-height: 21px;&#13;
  padding-top: 2px;&#13;
}&#13;
&#13;
.all-card-container,&#13;
.all-card-container-left,&#13;
.all-card-container-simple {&#13;
	display: grid;&#13;
	padding: $rm * 12;&#13;
	grid-template-columns: 1fr;&#13;
	grid-gap: $rm * 12;&#13;
}&#13;
&#13;
.card-thumbnail-align-left {&#13;
	display: flex;&#13;
	flex-direction: row;&#13;
	border: 1px solid $border-tertiary;&#13;
	box-sizing: border-box;&#13;
	border-radius: $border-radius-base;&#13;
	padding: $rm * 4 $rm * 8;&#13;
	flex: 1;&#13;
	justify-items: center;&#13;
	word-wrap: break-word;&#13;
	word-break: break-word;&#13;
	.icon-container {&#13;
		margin-right: $rm * 4;&#13;
		min-width: 85px;&#13;
		width: 85px;&#13;
	}&#13;
	.icon-container.card-small {&#13;
		min-width: 48px;&#13;
		width: 48px;&#13;
	}&#13;
	.content-container {&#13;
		padding-right: 0px;&#13;
		background-color: transparent;&#13;
		min-width: auto;&#13;
		align-self: center;&#13;
		flex-grow: 0;&#13;
		padding-left: $rm * 4;&#13;
		align-items: flex-start;&#13;
	}&#13;
}&#13;
&#13;
.card-thumbnail-align-left.card-medium {&#13;
	min-height: 121px;&#13;
}&#13;
&#13;
.card-thumbnail-align-left.card-small {&#13;
	min-height: 75px;&#13;
}&#13;
&#13;
.content-container--content-start {&#13;
  justify-content: start !important;&#13;
  padding: 0 $rm * 4 $rm * 4 $rm * 4 !important;&#13;
  background-color: transparent !important;&#13;
}&#13;
&#13;
.card-simple {&#13;
	position: relative;&#13;
	flex-grow: 1;&#13;
	display: flex;&#13;
	flex-direction: column;&#13;
	border-bottom: 1px solid $border-secondary;&#13;
	flex: 1;&#13;
	word-break: break-word;&#13;
	word-wrap: break-word;&#13;
	overflow: hidden;&#13;
	.content-container {&#13;
		margin-top: auto;&#13;
		margin-bottom: $rm * 8;&#13;
		padding: 0;&#13;
		flex-grow: 0;&#13;
		background-color: $background-primary;&#13;
	}&#13;
}&#13;
&#13;
.card-simple.card-small,&#13;
.card-simple.card-medium {&#13;
	min-height: 70px;&#13;
	max-height: 90px;&#13;
}&#13;
&#13;
.card-simple &gt; div &gt; span {&#13;
	color: black;&#13;
}&#13;
&#13;
.card-simple:hover &gt; div &gt; span {&#13;
	font-style: bold;&#13;
}&#13;
&#13;
.card-simple &gt; div &gt; div &gt; .card-title {&#13;
  color: $link-color;&#13;
}&#13;
&#13;
.card-simple:hover &gt; div &gt; div &gt; .card-title {&#13;
  color: $link-hover-color;&#13;
}&#13;
&#13;
.card-simple:hover &gt; div &gt; div &gt; .external-link--icon {&#13;
  color: $link-hover-color;&#13;
}&#13;
&#13;
.content-container.content-left-align {&#13;
	align-items: flex-start;&#13;
}&#13;
&#13;
.text-left-align {&#13;
	text-align: left !important;&#13;
}&#13;
&#13;
.card-thumbnail-align-center {&#13;
	position: relative;&#13;
	flex-grow: 1;&#13;
	display: flex;&#13;
	flex-direction: column;&#13;
	border: 1px solid $border-tertiary;&#13;
	box-sizing: border-box;&#13;
	border-radius: $border-radius-base;&#13;
	background-size: 100% 100%;&#13;
	background-position: bottom;&#13;
	word-break: break-word;&#13;
	word-wrap: break-word;&#13;
	overflow: hidden;&#13;
	.icon-container {&#13;
		padding: $rm * 4 $rm * 8 $rm * 4;&#13;
		min-height: 92px;&#13;
	}&#13;
	.icon-container--no-image-color {&#13;
		min-height: 0;&#13;
		padding: 0;&#13;
	}&#13;
	.icon-container--background-medium {&#13;
		min-height: 92px;&#13;
	}&#13;
	.icon-container--background-small {&#13;
		min-height: 44px;&#13;
	}&#13;
	.content-container--no-image-color {&#13;
		justify-content: center;&#13;
		padding: 0 $rm * 4;&#13;
		background-color: transparent;&#13;
	}&#13;
}&#13;
&#13;
.card-thumbnail-align-center.card-medium {&#13;
	max-height: 155px;&#13;
	min-height: 140px;&#13;
}&#13;
&#13;
.card-thumbnail-align-center.card-small {&#13;
	max-height: 108px;&#13;
	min-height: 76px;&#13;
}&#13;
&#13;
.icon-container {&#13;
	position: relative;&#13;
	box-sizing: border-box;&#13;
	display: flex;&#13;
	flex-grow: 0;&#13;
	flex-shrink: 1;&#13;
	justify-content: center;&#13;
	align-items: center;&#13;
}&#13;
&#13;
.icon {&#13;
	width: 64px;&#13;
	height: 64px;&#13;
	background-size: cover;&#13;
	z-index: 2;&#13;
	position: absolute;&#13;
}&#13;
.icon--with-overlay {&#13;
	height: 48px;&#13;
	width: 48px;&#13;
}&#13;
&#13;
.icon--small {&#13;
	width: 42px;&#13;
	height: 42px;&#13;
}&#13;
&#13;
.icon--small-with-overlay {&#13;
	width: 30px;&#13;
	height: 30px;&#13;
}&#13;
&#13;
.icon-bg-color {&#13;
	box-sizing: border-box;&#13;
	z-index: 1;&#13;
	width: 76px;&#13;
	height: 76px;&#13;
	opacity: 0.7;&#13;
	border-radius: 50%;&#13;
	mix-blend-mode: normal;&#13;
	position: absolute;&#13;
}&#13;
&#13;
.icon-bg-color--small {&#13;
	width: 48px;&#13;
	height: 48px;&#13;
}&#13;
&#13;
.content-container {&#13;
	box-sizing: border-box;&#13;
	display: flex;&#13;
	bottom: 0;&#13;
	flex-grow: 1;&#13;
	align-items: center;&#13;
	padding: $rm * 4 $rm * 8 $rm * 4;&#13;
	flex-direction: column;&#13;
	background-color: rgba(255, 255, 255, 0.7);&#13;
	mix-blend-mode: normal;&#13;
}&#13;
&#13;
.card-thumbnail-align-center:hover,&#13;
.card-thumbnail-align-left:hover {&#13;
	box-shadow: $sp-panel-box-shadow;&#13;
}&#13;
&#13;
.card-title {&#13;
	text-align: center;&#13;
	font-style: normal;&#13;
	font-weight: $headings-font-weight;&#13;
	color: $text-primary;&#13;
	font-size: $rm * 8;&#13;
	padding: 0;&#13;
	margin: 0;&#13;
}&#13;
&#13;
.card-description {&#13;
	text-align: center;&#13;
	font-style: normal;&#13;
	font-weight: normal;&#13;
	color: $text-primary;&#13;
	font-size: $rm * 7;&#13;
	padding-top: $rm * 2;&#13;
	padding: 0;&#13;
	margin: 0;&#13;
}&#13;
&#13;
.text-ellipsis {&#13;
	word-wrap: break-word;&#13;
	overflow: hidden;&#13;
	text-overflow: ellipsis;&#13;
	display: -webkit-box;&#13;
	-webkit-box-orient: vertical;&#13;
	-webkit-line-clamp: 2;&#13;
}&#13;
&#13;
a:hover {&#13;
	text-decoration: none !important;&#13;
}&#13;
&#13;
.all-card-container {&#13;
	grid-template-columns: repeat(auto-fill, minmax(20rem, 1fr));&#13;
}&#13;
&#13;
.all-card-container-left {&#13;
	grid-template-columns: repeat(auto-fill, minmax(25rem, 1fr));&#13;
}&#13;
&#13;
@media screen and (-ms-high-contrast: active),&#13;
(-ms-high-contrast: none) {&#13;
	.all-card-container,&#13;
	.all-card-container-left {&#13;
		display: flex;&#13;
		flex-wrap: wrap;&#13;
		justify-content: space-around;&#13;
	}&#13;
	&#13;
	.card-thumbnail-align-left.card-medium {&#13;
		width: 250px;&#13;
		min-width: 250px;&#13;
		max-width: 250px;&#13;
		margin-bottom: 16px;&#13;
		margin-right: 16px;&#13;
		flex: 1 0 100%;&#13;
	}&#13;
&#13;
	.card-thumbnail-align-left.card-small,&#13;
	.card-thumbnail-align-center,&#13;
	.card-simple {&#13;
		width: 200px;&#13;
		min-width: 200px;&#13;
		max-width: 200px;&#13;
		margin-bottom: 16px;&#13;
		margin-right: 16px;&#13;
		flex: 1 0 100%;&#13;
	}&#13;
&#13;
	.text-ellipsis {&#13;
		width: 160px;&#13;
	}&#13;
&#13;
	.text-ellipsis-small-icon {&#13;
		width: 90px;&#13;
	}&#13;
  &#13;
	.text-ellipsis-small-no-icon {&#13;
		width: 140px;&#13;
	}&#13;
  &#13;
	.text-ellipsis-medium-icon {&#13;
		width: 100px;&#13;
	}&#13;
&#13;
	.text-ellipsis-medium-no-icon {&#13;
		width: 180px;&#13;
	}&#13;
  &#13;
	.icon,&#13;
	.icon-bg-color {&#13;
		top: 50%;&#13;
		left: 50%;&#13;
		transform: translate(-50%, -50%);&#13;
	}&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data>{
	"data":{
		"json_data":[
			{
				"bg_image": "246b095c535030101865ddeeff7b12a3.iix?t=medium",
				"title": "Benefits",
				"shortDescription": "Find all the benefits here",
				"icon": "2fdc4d9c535030101865ddeeff7b1215.iix",
				"url": "https://www.google.com"
			},
			{
				"bg_image": "246b095c535030101865ddeeff7b12a3.iix?t=medium",
				"title": "Lorem ipsum dolor sit, amet consectetur adipisicing elit. Consectetur, repudiandae fugit",
				"shortDescription": "Find all the benefits here",
				"icon": "2fdc4d9c535030101865ddeeff7b1215.iix",
				"url": "https://www.yahoo.com"
			},
			{
				"bg_image": "246b095c535030101865ddeeff7b12a3.iix?t=medium",
				"title": "Benefits",
				"shortDescription": "Lorem ipsum dolor sit, amet consectetur adipisicing elit. Consectetur, repudiandae fugit",
				"icon": "2fdc4d9c535030101865ddeeff7b1215.iix",
				"url": "?id=esc_sc_category"
			},
			{
				"bg_image": "246b095c535030101865ddeeff7b12a3.iix?t=medium",
				"title": "Lorem ipsum dolor sit, amet consectetur adipisicing elit. Consectetur, repudiandae fugit",
				"shortDescription": "Lorem ipsum dolor sit, amet consectetur adipisicing elit. Consectetur, repudiandae fugit",
				"icon": "2fdc4d9c535030101865ddeeff7b1215.iix",
				"url": "?id=hri_user_profile&amp;sys_id=6816f79cc0a8016401c5a33be04be441"
			}
		]
	}
}</demo_data>
        <description>Generic way to create and save links on the page</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
    controller.keyboardAction = function(event,item) {
        if (event.keyCode == 13 || event.keyCode == 32) {
            event.preventDefault();
            event.stopPropagation();
            if (item.type == 'guided_help') {
                scope.clicked(item);
                return;
            }
            event.target.click();
        }
    };
}]]></link>
        <name>IRS of Quick Links</name>
        <option_schema>[{"hint":"","name":"title","section":"Presentation","default_value":"Quick links","label":"Title","type":"string"},{"hint":"The display style of the card (default: Thumbnail)","name":"card_type","section":"Presentation","default_value":"Thumbnail","label":"Card display style","type":"choice","choices":[{"label":"Thumbnail","value":"Thumbnail"},{"label":"Simple","value":"Simple"}]},{"hint":"The size of the card tile (default: Medium)","name":"card_size","section":"Presentation","default_value":"Medium","label":"Card tile size","type":"choice","choices":[{"label":"Medium","value":"Medium"},{"label":"Small","value":"Small"}]},{"hint":"The alignment of the card content","name":"text_alignment","section":"Presentation","default_value":"Default","label":"Card content alignment","type":"choice","choices":[{"label":"Center","value":"Center"},{"label":"Default","value":"Default"}]},{"hint":"Valid only for thumbnail cards","name":"show_icon","section":"Presentation","default_value":"true","label":"Icon image display","type":"boolean"},{"hint":"Valid for center-aligned thumbnail cards","name":"show_background","section":"Presentation","default_value":"true","label":"Background image display","type":"boolean"},{"hint":"Valid for medium default aligned and medium simple cards","name":"show_description","section":"Presentation","default_value":"true","label":"Include description","type":"boolean"},{"hint":"Displays if the background image is absent or disabled for thumbnail cards","name":"background_color","section":"Presentation","default_value":"","label":"Tile background color","type":"choice","choices":[{"label":"Primary","value":"Primary"},{"label":"Dark","value":"Dark"},{"label":"Light","value":"Light"},{"label":"Accent","value":"Accent"},{"label":"Hexcode","value":"Hexcode"}]},{"hint":"Applies when custom-hexcode tile background color is selected (default: White)","name":"background_hexcode","section":"Presentation","default_value":"#FFFFFF","label":"Tile background color hexcode (Eg. #FFFFFF)","type":"string"},{"hint":"Displays a circular background when the icon is present","name":"icon_background_color","section":"Presentation","default_value":"false","label":"Icon overlay display","type":"boolean"},{"hint":"Applies when Icon Background Color is enabled (default: White)","name":"icon_background_hexcode","section":"Presentation","default_value":"#FFFFFF","label":"Icon overlay color hexcode (Eg. #FFFFFF)","type":"string"},{"hint":"Valid for center-aligned thumbnail cards","name":"show_text_overlay","section":"Presentation","default_value":"true","label":"Text overlay display","type":"boolean"},{"hint":"Applies when Text Overlay Display is enabled (default: White)","name":"text_overlay_hexcode","section":"Presentation","default_value":"#FFFFFF","label":"Text overlay color hexcode (Eg. #FFFFFF)","type":"string"},{"hint":"Valid only for thumbnail cards","name":"text_color","section":"Presentation","default_value":"false","label":"Custom text color","type":"boolean"},{"hint":"Applies when Custom Text Color is enabled (default: Black)","name":"text_color_hexcode","section":"Presentation","default_value":"#000000","label":"Custom text color hexcode (Eg. #000000)","type":"string"},{"displayValue":"Quick Link","hint":"Set of quick links for the widget","name":"quick_links","display_value_list":[],"section":"Presentation","label":"Quick links","type":"glide_list","value":"sn_ex_sp_quick_link","ed":{"reference":"sn_ex_sp_quick_link"}},{"name":"load_config","section":"other","default_value":"async","label":"Load configuration","type":"choice","choices":[{"label":"sync","value":"sync"},{"label":"async","value":"async"}]},{"hint":"Shows empty state if the widget content is empty.","name":"show_empty_state","section":"other","default_value":"false","label":"Show empty state","type":"boolean"}]</option_schema>
        <public>true</public>
        <roles>snc_internal,sn_ta_hiring_core.applicant,snc_external</roles>
        <script><![CDATA[(function() {
    data.load_config = options.load_config;
    if (data.load_config === "async" && !input)
        return;
    data.quickLinkHeader = gs.getMessage(options.title);
    data.instanceId = $sp.getDisplayValue("sys_id");
    var quickLinkId = $sp.getParameter("quick_link_id");
    var pageId = $sp.getParameter("id");
    var startTime = new GlideDateTime();

    data.portal = $sp.getPortalRecord();
    var quickLinkUtil = new sn_ex_sp.QuickLinkUtil();

    setOptions(options);
    if (quickLinkId && pageId == "quick_link_preview") {
        data.json_data = quickLinkUtil.fetchQuicklinksForHomePage(quickLinkId, data.instanceId);
    } else if (options.quick_links) {
        data.json_data = quickLinkUtil.fetchQuicklinksForHomePage(options.quick_links, data.instanceId);
    }

    var stats = {};
    stats.callerId = data.instanceId;
    stats.textPrefix = 'Quick Links';
    stats.startTime = startTime;
    stats.shortDesc = 'Load Data';
    new sn_ex_sp.PerformanceIndicatorUtil().postInstanceHotspot(stats);

    function setOptions(customOptions) {
        var cardSizes = {
            "Small": "card-small",
            "Medium": "card-medium"
        };

        data.card_type = customOptions.card_type;
        data.card_size = cardSizes[customOptions.card_size];
        data.text_alignment = customOptions.text_alignment === "Center" ? customOptions.text_alignment : "Default";

        data.show_background = customOptions.show_background;
        data.show_icon = customOptions.show_icon;
        data.show_description = customOptions.show_description;

        data.background_color = customOptions.background_color;
        data.background_hexcode = customOptions.background_hexcode;

        data.icon_background_color = customOptions.icon_background_color;
        data.icon_background_hexcode = customOptions.icon_background_hexcode;

        data.show_text_overlay = customOptions.show_text_overlay;
        data.text_overlay_hexcode = customOptions.text_overlay_hexcode;

        data.text_color = customOptions.text_color;
        data.text_color_hexcode = customOptions.text_color_hexcode;
        data.showEmptyState = options.show_empty_state;
    }

    if (input && input.action == 'openGuidedhelp' && input.guidedHelpId) {
        data.pageId = $sp.getParameter('id') ? $sp.getParameter('id') : data.portal.homepage.getDisplayValue();
        data.guidedHelpResponse = new sn_ex_sp.QuickLinkUtil().handleGuidedHelpClick(input.guidedHelpId, data.pageId, "quick_link");
    }

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>ruben.fernandez</sys_created_by>
        <sys_created_on>2025-06-06 19:12:44</sys_created_on>
        <sys_id>5052771c9306ea10d942fc4e1dba10f6</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>IRS of Quick Links</sys_name>
        <sys_package display_value="GitHub SSDT" source="x_volt2_github_s_0">209d68cbc3ede6103ab9b0170501312b</sys_package>
        <sys_policy/>
        <sys_scope display_value="GitHub SSDT">209d68cbc3ede6103ab9b0170501312b</sys_scope>
        <sys_update_name>sp_widget_5052771c9306ea10d942fc4e1dba10f6</sys_update_name>
        <sys_updated_by>ruben.fernandez</sys_updated_by>
        <sys_updated_on>2025-06-06 21:15:33</sys_updated_on>
        <template><![CDATA[<div class = "link-container panel panel-default b panel-wrapper", style="margin-top: 1.5em"
     ng-if="(data.json_data && data.json_data.length > 0) || data.showEmptyState === 'true'">
  <div class = "panel-heading b-b">
    	 <h3 class="panel-title" id="{{data.instanceId}}-widget-title">{{data.quickLinkHeader}}</h3>
  </div>  
 <div class="quick-link-empty-state" ng-if="data.showEmptyState === 'true' && (!data.json_data || data.json_data.length === 0)">
  <p>${We don't have any quick links to show you yet.}</p>
 </div>
 <div ng-if="data.json_data && data.json_data.length > 0" aria-labelledby="{{data.instanceId}}-widget-title" role="region">
  <!-- Thumbnail Cards Center Aligned --> 
  <div class="all-card-container" 
       ng-if="c.data.card_type == 'Thumbnail' && c.data.text_alignment == 'Center'">
    <a ng-repeat="item in data.json_data" 
       class="card-thumbnail-align-center {{c.data.card_size}}"
       aria-labelledby="{{data.instanceId}}-item-{{$index}}"
       id="{{data.instanceId}}-item-{{$index}}"
       ng-href="{{item.url}}"
       ng-click="clicked(item)"
       ng-attr-target="{{item.target}}"
       ng-class="getCustomColor('background')" 
       ng-style="getStyle(item, 'background')"
       ng-keydown="c.keyboardAction($event,item)"
       ng-focus="handleCardFocus($event)"
       ng-blur="handleCardBlur($event)"
       tabindex="0">
      <div class="icon-container" 
           ng-class = "getEvaluatedIconContainer(item)">
        <div class="icon-bg-color" 
             ng-if="(c.data.icon_background_color === 'true' && c.data.show_icon === 'true' && c.data.card_size != 'card-small' && [item.icon.length] != 0)"
             ng-class="getCustomColor('icon_overlay')" 
             ng-style="getStyle(item,'icon_overlay')"/>
        <div class = "icon"
             ng-class="{'icon--with-overlay' : (c.data.icon_background_color === 'true')}"
             ng-if="[item.icon.length] != 0 && c.data.show_icon === 'true' && c.data.card_size != 'card-small'" 
             style="background-image: url({{item.icon}})"/>
      </div>
      <div class="content-container" 
           ng-class = "getEvaluatedContentContainer(item)"
           ng-style="getStyle(item,'text_overlay')">
        <div class = "title--with-icon">
          <span class="card-title text-ellipsis"
              ec-multiline-ellipsis-tooltip
              ec-ellipsis-tooltip-title="{{item.title}}"
              ec-ellipsis-tooltip-data-toggle="tooltip"
              ec-ellipsis-tooltip-data-container="body"
              ng-class="getCustomColor('text')" 
              ng-style="getStyle(item,'text')">{{item.title}}
          </span>
          <i class="fa fa-external-link external-link--icon"
             ng-if="(item.target == '_blank')"
             ng-class="getCustomColor('text')" 
             ng-style="getStyle(item,'text')">
          </i>
        </div>
      </div>
      <span id="{{data.instanceId}}-ext-link-{{$index}}"
          class="sr-only"
          ng-if="(item.target == '_blank')">${, opens in a new window}
      </span>
    </a>
  </div>
  
  <!-- Thumbnail Cards Default Aligned -->   
  <div ng-class="{'all-card-container-left' : (c.data.card_size === 'card-medium'),'all-card-container' : (c.data.card_size === 'card-small')}" 
       ng-if="c.data.card_type=='Thumbnail' && c.data.text_alignment=='Default'">
    <a ng-repeat="item in data.json_data" 
       class="card-thumbnail-align-left {{c.data.card_size}}"
       aria-labelledby="{{data.instanceId}}-item-{{$index}}"
       ng-href="{{item.url}}"
       id="{{data.instanceId}}-item-{{$index}}"
       ng-attr-target="{{item.target}}" 
       ng-class="getCustomColor('background')" 
       ng-style="getStyle(item, 'background')">
      <div class="icon-container {{c.data.card_size}}" 
           ng-if="c.data.show_icon === 'true' && [item.icon.length] != 0">
        <div class="icon-bg-color" 
             ng-class = "{'icon-bg-color--small': (c.data.card_size === 'card-small'),[getCustomColor('icon_overlay')] : true}"
             ng-if="c.data.icon_background_color === 'true' && [item.icon.length] != 0"
             ng-style="getStyle(item, 'icon_overlay')"/>
        <div class="icon"
             ng-if="[item.icon.length] != 0"
             ng-class = "{'icon--with-overlay' : (c.data.icon_background_color === 'true'),
                          'icon--small-with-overlay': (c.data.card_size === 'card-small' && c.data.icon_background_color === 'true'),
                          'icon--small': (c.data.card_size === 'card-small' && c.data.icon_background_color === 'false')}"
             style="background-image: url({{item.icon}})"/>
      </div>
      <div class="content-container">
        <div class = "title--with-icon">
          <span class='card-title text-left-align text-ellipsis'
                ec-multiline-ellipsis-tooltip
                ec-ellipsis-tooltip-title="{{item.title}}"
                ec-ellipsis-tooltip-data-toggle="tooltip"
                ec-ellipsis-tooltip-data-container="body"
                ng-class = "{[getTextEllipsisClassForIE(item)] : true,[getCustomColor('text')] : true}"
                ng-style="getStyle(item,'text')">{{item.title}}
          </span>
          <i class="fa fa-external-link external-link--icon"
             ng-if="(item.target == '_blank')"
             ng-class="getCustomColor('text')" 
             ng-style="getStyle(item,'text')">
          </i>
        </div>
        <span class='card-description text-left-align text-ellipsis'
              id="{{data.instanceId}}-card-desc-{{$index}}"
              ec-multiline-ellipsis-tooltip
              ec-ellipsis-tooltip-title="{{item.shortDescription}}"
              ec-ellipsis-tooltip-data-toggle="tooltip"
              ec-ellipsis-tooltip-data-container="body"
              ng-class = "{[getTextEllipsisClassForIE(item)] : true, [getCustomColor('text')] : true}"
              ng-style="getStyle(item,'text')"
              ng-if="c.data.show_description === 'true' && c.data.card_size != 'card-small'" >{{item.shortDescription}}
        </span>
      </div>
      <span id="{{data.instanceId}}-ext-link-{{$index}}"
            class="sr-only"
            ng-if="(item.target == '_blank')">${, opens in a new window}
      </span>
    </a>
  </div>
  
  <!-- Simple Cards (Center / Default) -->  
  <div class="all-card-container" 
       ng-if="c.data.card_type=='Simple'">
    <a ng-repeat="item in data.json_data"
       class="card-simple {{c.data.card_size}}"
       aria-labelledby="{{data.instanceId}}-item-{{$index}}"
       ng-href="{{item.url}}"
       id="{{data.instanceId}}-item-{{$index}}"
       ng-attr-target="{{item.target}}">
      <div class="content-container" 
           ng-class="{'content-left-align': c.data.text_alignment=='Default'}">
        <div class = "title--with-icon">
          <span class="card-title text-ellipsis"
                ec-multiline-ellipsis-tooltip
                ec-ellipsis-tooltip-title="{{item.title}}"
                ec-ellipsis-tooltip-data-toggle="tooltip"
                ec-ellipsis-tooltip-data-container="body"
                ng-class="{'text-left-align': c.data.text_alignment=='Default'}">{{item.title}}
          </span>
          <i class="fa fa-external-link external-link--icon"
             ng-if="(item.target == '_blank')">
          </i>
        </div>
        <span class="card-description text-ellipsis"
              ec-multiline-ellipsis-tooltip
              ec-ellipsis-tooltip-title="{{item.shortDescription}}"
              ec-ellipsis-tooltip-data-toggle="tooltip"
              ec-ellipsis-tooltip-data-container="body"
              id="{{data.instanceId}}-card-desc-{{$index}}"
              ng-class="{'text-left-align': c.data.text_alignment=='Default'}" 
              ng-if="c.data.show_description === 'true' && c.data.card_size =='card-medium'">{{item.shortDescription}}
        </span>
      </div>
      <span id="{{data.instanceId}}-ext-link-{{$index}}"
            class="sr-only"
            ng-if="(item.target == '_blank')">${, opens in a new window}
      </span>
    </a>
  </div>
</div>
</div>]]></template>
    </sp_widget>
</record_update>
